# src/mcp_daytona_server/mcp_server.py
import os
from typing import Dict, Optional
from dotenv import load_dotenv
from pydantic_settings import BaseSettings, SettingsConfigDict
from mcp.server.fastmcp import FastMCP, Context
from daytona_sdk import Daytona, CreateWorkspaceParams
from daytona_sdk.daytona import DaytonaConfig

class Settings(BaseSettings):
    """Settings for the FastAPI server."""

    model_config = SettingsConfigDict(
        env_file=".env.local",
        extra="allow"
    )

    mcp_daytona_api_key: str
    mcp_daytona_server_url: str
    mcp_daytona_target: str = "local"

    def __str__(self):
        return f"""
        Daytona Settings:
        API Key: {self.mcp_daytona_api_key[:8]}...
        Server URL: {self.mcp_daytona_server_url}
        Target: {self.mcp_daytona_target}
        """

load_dotenv()
settings = Settings()
print(settings)  # Add this line to print settings

# src/mcp_daytona_server/mcp_server.py
# ... (previous imports) ...

def create_mcp_server() -> FastMCP:
    mcp = FastMCP(name="Daytona MCP", description="MCP Server with Daytona integration.")

    config = DaytonaConfig(
        api_key=settings.mcp_daytona_api_key,
        server_url=settings.mcp_daytona_server_url,
        target=settings.mcp_daytona_target
    )

    daytona_client = Daytona(config=config)

    @mcp.tool()
    async def create_daytona_env(
        language: str = "python",  # Default to python
        image: Optional[str] = None,
        os_user: Optional[str] = None,
        env_vars: Optional[Dict[str, str]] = None
    ) -> str:
        """Creates a new Daytona development environment. Returns workspace ID."""
        try:
            # Only pass the minimal required parameters
            params = CreateWorkspaceParams(
                language=language,
                id=f"mcp-workspace-{os.urandom(4).hex()}"  # Generate unique ID
            )
            print(f"\nCreating workspace with params: {params}")

            workspace = await daytona_client.create(params)
            print(f"\nWorkspace created: {workspace}")
            return workspace.id

        except Exception as e:
            print(f"\nError creating workspace: {str(e)}")
            print(f"Error type: {type(e)}")
            if hasattr(e, 'body'):
                print(f"Error body: {e.body}")
            raise

    @mcp.tool()
    async def execute_claude_code(
        code: str,
        workspace_id: str
    ) -> str:
        """Executes code generated by Claude inside a sandboxed Daytona workspace."""
        try:
            workspace = daytona_client.get_current_workspace(workspace_id=workspace_id)
            response = await workspace.process.code_run(code)
            return response.result
        except Exception as e:
            print(f"\nError executing code: {str(e)}")
            print(f"Error type: {type(e)}")
            raise

    @mcp.tool()
    async def remove_daytona_env(workspace_id: str) -> str:
        """Removes the given Daytona workspace."""
        try:
            workspace = daytona_client.get_current_workspace(workspace_id=workspace_id)
            await daytona_client.remove(workspace)
            return "Removed workspace"
        except Exception as e:
            print(f"\nError removing workspace: {str(e)}")
            print(f"Error type: {type(e)}")
            raise

    return mcp